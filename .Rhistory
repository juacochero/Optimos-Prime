xlab("") +
ylab(label)
}
op_plot(optimos, "Turbidez [UTN]", "Turbidez")
########-------- FUNCTION OP_PLOT CREATES A PLOT FOR A SELECTED VARIABLE SHOWING OPTIMA AND TOLERANCE RANGE BY INCREASING OPTIMA  --------------#########
op_plot <- function(optimaDF, variable, label){
# Needs tidyverse library and ggPlot2 library
library(tidyverse)
library(ggplot2)
#EXTRACTS COLUMNS
variablemas <- paste(variable, "-HIGH")
variablemenos <- paste(variable, "-LOW")
data1mean <- optimaDF[[variable]]
data1mas <- optimaDF[[variablemas]]
data1menos <- optimaDF[[variablemenos]]
data1 <- as.data.frame(optimaDF$Species)
data1$promedio <- data1mean
data1$value1 <- data1mas
data1$value2 <- data1menos
colnames(data1) <- c("species", "promedio", "value1", "value2")
# Reorder data using average
data1 = data1 %>% rowwise() %>% mutate( mymean = promedio) %>% arrange(mymean) %>% mutate(x=factor(species, species))
# PLOT
ggplot(data1) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=promedio), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value1), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
coord_flip()+
theme_light() +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
) +
xlab("") +
ylab(label)
}
op_plot(optimos, "Turbidez [UTN]", "Turbidez")
########-------- FUNCTION OP_PLOT CREATES A PLOT FOR A SELECTED VARIABLE SHOWING OPTIMA AND TOLERANCE RANGE BY INCREASING OPTIMA  --------------#########
op_plot <- function(optimaDF, variable, label){
# Needs tidyverse library and ggPlot2 library
library(tidyverse)
library(ggplot2)
#EXTRACTS COLUMNS
variablemas <- paste(variable, "-HIGH")
variablemenos <- paste(variable, "-LOW")
data1mean <- optimaDF[[variable]]
data1mas <- optimaDF[[variablemas]]
data1menos <- optimaDF[[variablemenos]]
data1 <- as.data.frame(optimaDF$Species)
data1$promedio <- data1mean
data1$value1 <- data1mas
data1$value2 <- data1menos
colnames(data1) <- c("species", "promedio", "value1", "value2")
# Reorder data using average
data1 = data1 %>% rowwise() %>% mutate( mymean = promedio) %>% arrange(mymean) %>% mutate(x=factor(species, species))
# PLOT
ggplot(data1) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=promedio), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value1), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
coord_flip()+
theme_light() +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = color=rgb(0.7,0.2,0.1,0.5)
) +
xlab("") +
ylab(label)
}
########-------- FUNCTION OP_PLOT CREATES A PLOT FOR A SELECTED VARIABLE SHOWING OPTIMA AND TOLERANCE RANGE BY INCREASING OPTIMA  --------------#########
op_plot <- function(optimaDF, variable, label){
# Needs tidyverse library and ggPlot2 library
library(tidyverse)
library(ggplot2)
#EXTRACTS COLUMNS
variablemas <- paste(variable, "-HIGH")
variablemenos <- paste(variable, "-LOW")
data1mean <- optimaDF[[variable]]
data1mas <- optimaDF[[variablemas]]
data1menos <- optimaDF[[variablemenos]]
data1 <- as.data.frame(optimaDF$Species)
data1$promedio <- data1mean
data1$value1 <- data1mas
data1$value2 <- data1menos
colnames(data1) <- c("species", "promedio", "value1", "value2")
# Reorder data using average
data1 = data1 %>% rowwise() %>% mutate( mymean = promedio) %>% arrange(mymean) %>% mutate(x=factor(species, species))
# PLOT
ggplot(data1) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=promedio), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value1), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
coord_flip()+
theme_light() +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = color = "red"
) +
xlab("") +
ylab(label)
}
########-------- FUNCTION OP_PLOT CREATES A PLOT FOR A SELECTED VARIABLE SHOWING OPTIMA AND TOLERANCE RANGE BY INCREASING OPTIMA  --------------#########
op_plot <- function(optimaDF, variable, label){
# Needs tidyverse library and ggPlot2 library
library(tidyverse)
library(ggplot2)
#EXTRACTS COLUMNS
variablemas <- paste(variable, "-HIGH")
variablemenos <- paste(variable, "-LOW")
data1mean <- optimaDF[[variable]]
data1mas <- optimaDF[[variablemas]]
data1menos <- optimaDF[[variablemenos]]
data1 <- as.data.frame(optimaDF$Species)
data1$promedio <- data1mean
data1$value1 <- data1mas
data1$value2 <- data1menos
colnames(data1) <- c("species", "promedio", "value1", "value2")
# Reorder data using average
data1 = data1 %>% rowwise() %>% mutate( mymean = promedio) %>% arrange(mymean) %>% mutate(x=factor(species, species))
# PLOT
ggplot(data1) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=promedio), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value1), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
coord_flip()+
theme_light() +
theme(
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(color = "red")
) +
xlab("") +
ylab(label)
}
op_plot(optimos, "Turbidez [UTN]", "Turbidez")
########-------- FUNCTION OP_PLOT CREATES A PLOT FOR A SELECTED VARIABLE SHOWING OPTIMA AND TOLERANCE RANGE BY INCREASING OPTIMA  --------------#########
op_plot <- function(optimaDF, variable, label){
# Needs tidyverse library and ggPlot2 library
library(tidyverse)
library(ggplot2)
#EXTRACTS COLUMNS
variablemas <- paste(variable, "-HIGH")
variablemenos <- paste(variable, "-LOW")
data1mean <- optimaDF[[variable]]
data1mas <- optimaDF[[variablemas]]
data1menos <- optimaDF[[variablemenos]]
data1 <- as.data.frame(optimaDF$Species)
data1$promedio <- data1mean
data1$value1 <- data1mas
data1$value2 <- data1menos
colnames(data1) <- c("species", "promedio", "value1", "value2")
# Reorder data using average
data1 = data1 %>% rowwise() %>% mutate( mymean = promedio) %>% arrange(mymean) %>% mutate(x=factor(species, species))
# PLOT
ggplot(data1) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=promedio), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value1), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
coord_flip()+
theme_light() +
theme(
legend.position = "none",
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(color = "gray")
) +
xlab("") +
ylab(label)
}
op_plot(optimos, "Turbidez [UTN]", "Turbidez")
# PLOT
ggplot(data1) +
geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color="grey") +
geom_point( aes(x=x, y=promedio), color=rgb(0.2,0.7,0.1,0.5), size=3 ) +
geom_point( aes(x=x, y=value1), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=1 ) +
coord_flip()+
theme_light() +
theme(
legend.position = "none",
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(color = "gray")
) +
xlab("") +
ylab(label)
library(roxygen2)
document()
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
document()
roxygen2
library(roxygen2)
roxygenize()
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
devtools::install_github("klutometis/roxygen", force=TRUE)
library(roxygen2)
roxygenise()
install.packages("roxygen2")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
setwd("D:/Users/Juaco/Google Drive/R tests/optimos.prime")
document()
document()
devtools::document()
devtools::document()
########-------- FUNCTION OP_LISTS SHOWS SPECIES LIST AND ENVIRONMENTAL VARIABLES LISTS  --------------#########
op_lists <- function(enviromental_df, species_df, listOnly=0){
# First checks in environmental and species dataframes exist. If not, loads them from CSV files
if(missing(enviromental_df) | missing(species_df) ) {
print("Select CSV matrices")
########-------- LOADS THE SPECIES AND ENVIRONMENTAL DATA FROM CSV FILES IF NOT IN DATAMATRIX
Filters <- matrix(c("Comma Separated Values (CSV)", "*.csv"),
1, 2, byrow = TRUE)
print("Select ENVIRONMENTAL matrix first")
enviromental_df <- read.csv(choose.files(caption="Select environmental matrix", filters = Filters),sep=",")
print("Select SPECIES matrix second")
species_df <- read.csv(choose.files(caption="Select species density matrix", filters = Filters),sep=",")
}
df_ambientales <- enviromental_df
df_densidades <- species_df
#Checks that both matrices exist, or exits
if(missing(enviromental_df) | missing(species_df) ) {
stop("The correct matrices were not selected, the script will cancel.")
}
# Creates three lists: site list, species list and environmental variables list, and returns them
list_sites <- t(colnames(df_densidades[2:ncol(df_densidades)]))
list_especies <- as.vector(df_densidades[,1])
list_ambientales <- as.vector(df_ambientales[,1])
if(listOnly=0){
newList <- list(list_sites, list_especies, list_ambientales)
return(newList)
} else if(listOnly=1){
newList <- list(list_sites)
return(newList)
} else if(listOnly=2){
newList <- list(list_especies)
return(newList)
} else if(listOnly=3){
newList <- list(list_ambientales)
return(newList)
}
}
########-------- FUNCTION OP_LISTS SHOWS SPECIES LIST AND ENVIRONMENTAL VARIABLES LISTS  --------------#########
op_lists <- function(enviromental_df, species_df, listOnly=0){
# First checks in environmental and species dataframes exist. If not, loads them from CSV files
if(missing(enviromental_df) | missing(species_df) ) {
print("Select CSV matrices")
########-------- LOADS THE SPECIES AND ENVIRONMENTAL DATA FROM CSV FILES IF NOT IN DATAMATRIX
Filters <- matrix(c("Comma Separated Values (CSV)", "*.csv"),
1, 2, byrow = TRUE)
print("Select ENVIRONMENTAL matrix first")
enviromental_df <- read.csv(choose.files(caption="Select environmental matrix", filters = Filters),sep=",")
print("Select SPECIES matrix second")
species_df <- read.csv(choose.files(caption="Select species density matrix", filters = Filters),sep=",")
}
df_ambientales <- enviromental_df
df_densidades <- species_df
#Checks that both matrices exist, or exits
if(missing(enviromental_df) | missing(species_df) ) {
stop("The correct matrices were not selected, the script will cancel.")
}
# Creates three lists: site list, species list and environmental variables list, and returns them
list_sites <- t(colnames(df_densidades[2:ncol(df_densidades)]))
list_especies <- as.vector(df_densidades[,1])
list_ambientales <- as.vector(df_ambientales[,1])
if(listOnly==0){
newList <- list(list_sites, list_especies, list_ambientales)
return(newList)
} else if(listOnly==1){
newList <- list(list_sites)
return(newList)
} else if(listOnly==2){
newList <- list(list_especies)
return(newList)
} else if(listOnly==3){
newList <- list(list_ambientales)
return(newList)
}
}
if(listOnly==0){
newList <- list(list_sites, list_especies, list_ambientales)
return(newList)
} else if(listOnly==1){
newList <- list(list_sites)
return(newList)
} else if(listOnly==2){
newList <- list(list_especies)
return(newList)
} else if(listOnly==3){
newList <- list(list_ambientales)
return(newList)
}
if(listOnly==0){
newList <- list(list_sites, list_especies, list_ambientales)
return(newList)
} else if(listOnly==1){
newList <- list(list_sites)
return(newList)
} else if(listOnly==2){
newList <- list(list_especies)
return(newList)
} else if(listOnly==3){
newList <- list(list_ambientales)
return(newList)
}
library(ps)
install.packages("ps")
library(ps)
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenize()
devtools::document()
devtools::document()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(optimos.prime)
op_calculate()
op_lists()
op_lists()
op_lists(,,1)
listasitios <- op_lists(,,1)
View(listasitios)
listasitios <- as.data.frame(op_lists(,,1))
View(listasitios)
listasitios <- as.data.frame(op_lists(,,2))
View(listasitios)
TablaOptimos <- op_calculate()
View(TablaOptimos)
op_plot(TablaOptimos, "OD [mg/L]", "Oxygen")
op_plot(TablaOptimos, "OD [mg/l]", "Oxygen")
library(ggplot2)
library(tidyverse)
op_plot(TablaOptimos, "OD [mg/l]", "Oxygen")
op_plot(TablaOptimos, "OD [mg/l]", "Oxygen")
p <- op_plot(TablaOptimos, "OD [mg/l]", "Oxygen")
View(p)
library(plotly)
ggplotly(p)
op_plot(TablaOptimos, "OD [mg/l]", "Oxygen")
library(optimos.prime)
op_plot(TablaOptimos, "OD [mg/l]", "Oxygen")
library(optimos.prime)
op_plot(TablaOptimos, "OD [mg/l]", "Oxygen")
View(TablaOptimos)
colnames(TablaOptimos)
even_indexes<-seq(1,TablaOptimos.colnum, 2)
even_indexes<-seq(1,ncol(TablaOptimos, 3)
even_indexes<-seq(1,ncol(TablaOptimos, 3)
even_indexes<-seq(1,ncol(TablaOptimos, 3)
)
even_indexes<-seq(1,ncol(TablaOptimos), 3)
View(even_indexes)
even_names <- colnames(TablaOptimos[even_indexes])
View(even_indexes)
View(even_names)
col_indexes <- seq(2,ncol(TablaOptimos), 3)
col_names <- colnames(TablaOptimos[col_indexes])
View(col_names)
variable <- readline("What variable number do you want to plot?")
col_indexes <- seq(2,ncol(TablaOptimos), 3)
col_names <- colnames(TablaOptimos[col_indexes])
print(colnames)
print(col_names)
print(as.vector(col_names[1]))
print(as.vector(col_names[,1]))
print(as.vector(col_names[1,]))
print(as.vector(col_names[0,]))
print(as.vector(col_names[1]))
print(avector <- col_names[, 1, drop=FALSE])
View(col_names)
print(avector <- col_names[, 2, drop=FALSE])
print(as.vector(col_names))
print(col_names)
cat()
cat(1:5,sep="\n")
cat(col_names,sep="\n")
print(cat(col_names,sep="\n"))
print(data.table(col_names))
print(as.data.frame(col_names))
print(as.data.frame(col_names))
print(write.matrix(col_names))
print(write.table(col_names))
write.table(col_names)
col_indexes <- seq(2,ncol(TablaOptimos), 3)
col_names <- colnames(TablaOptimos[col_indexes])
write.table(col_names)
variablenum <- readline(prompt= "What variable number do you want to plot?")
variablenum <- as.numeric(unlist(strsplit(x, ",")))
variable <- col_names[variablenum]
variablenum <- as.numeric(unlist(strsplit(variablenum, ",")))
variable <- col_names[variablenum]
#EXTRACTS COLUMNS
variablemas <- paste(variable, "-HIGH")
variablemenos <- paste(variable, "-LOW")
data1mean <- optimaDF[[variable]]
data1mas <- optimaDF[[variablemas]]
data1menos <- optimaDF[[variablemenos]]
data1 <- as.data.frame(optimaDF$Species)
data1$optimum <- data1mean
data1$max <- data1mas
data1$min <- data1menos
colnames(data1) <- c("species", "optimum", "max", "min")
library(optimos.prime)
TablaOptimos <- op_calculate
TablaOptimos <- op_calculate()
View(TablaOptimos)
op_plot()
op_plot()
op_plot(TablaOptimos)
op_plot(TablaOptimos, "variableXXX")
op_plot(TablaOptimos, "variableXXX")
#Offers options for variables
col_indexes <- seq(2,ncol(TablaOptimos), 3)
col_names <- colnames(TablaOptimos[col_indexes])
colTable <- data.frame(variables=col_names)
View(colTable)
print(colTable)
print(colTable, col_names=FALSE)
write.table(colTable)
print(colTable)
colnames(colTable, c())
colnames(colTable) <- c()
View(colTable)
col_names <- colnames(TablaOptimos[col_indexes])
colTable <- data.frame(variables=col_names)
View(colTable)
colnames(colTable) <- c()
print(colTable)
library(optimos.prime)
op_plot()
op_plot()
library(optimos.prime)
library(optimos.prime)
op_plot()
op_plot(TablaOptimos)
library(optimos.prime)
op_plot(TablaOptimos)
op_plot(TablaOptimos)
library(optimos.prime)
op_plot(TablaOptimos)
roxygen2::roxygenize()
roxygen2::roxygenize()
install.packages("devtools")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(optimos.prime)
TablaOptimos <- op_calculate()
op_plot(TablaOptimos)
library("ggplot2", lib.loc="~/R/win-library/3.5")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.5")
detach("package:ggplot2", unload=TRUE)
detach("package:tidyverse", unload=TRUE)
detach("package:plotly", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:optimos.prime", unload=TRUE)
op_calculate()
library(optimos.prime)
tabla <- op_calculate()
op_plot(tabla)
library(optimos.prime)
op_plot(tabla)
roxygen2::roxygenize()
?optimos.prime
?op_calculate
roxygen2::roxygenize()
install.packages("optimos.prime")
install.packages("optimos.prime")
library(optimos.prime)
op_calculate()
results_op <- op_calculate()
View(results_op)
op_plot(results_op)
library(optimos.prime)
op_plot(results_op)
op_plot(results_op)
