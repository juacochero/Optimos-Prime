testsp1_amb[valrow,'sumaDens_SiFQ'] <- sumrowI
}
View(testamb)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# multiplies both matrices
testsp1_amb <- sweep(testamb[,2:ncol(testamb)], MARGIN=2, testsp1, '*')
########-------- FUNCTION OP_CALCULATE CALCULATES OPTIMA AND TOLERANCE RANGES  --------------#########
op_calculate <- function(enviromental_df, species_df, isRelAb=TRUE, islog10=FALSE){
# First checks in environmental and species data frames exist. If not, loads them from CSV files
if(missing(enviromental_df) | missing(species_df) ) {
print("Select CSV matrices")
########-------- LOADS THE SPECIES AND ENVIRONMENTAL DATA FROM CSV FILES IF NOT IN DATAMATRIX
Filters <- matrix(c("Comma Separated Values (CSV)", "*.csv"),
1, 2, byrow = TRUE)
print("Select ENVIRONMENTAL matrix")
enviromental_df <- read.csv(choose.files(caption="Select environmental matrix", filters = Filters),sep=",")
print("Select SPECIES matrix")
species_df <- read.csv(choose.files(caption="Select species density matrix", filters = Filters),sep=",")
}
df_densidades <- species_df
df_ambientales <- enviromental_df
#Checks that both matrices exist, or exits
if(missing(enviromental_df) | missing(species_df) ) {
stop("The correct matrices were not selected, the script will cancel.")
}
print("Calculating... please wait!")
# IF THE SPECIES DATA IS NOT RELATIVE ABUNDANCE, IT CONVERTS IT TO RELATIVE ABUNDANCE
if(isRelAb==FALSE){
print("Converting species' densities to relative abundance")
for (species_i in 1:nrow(df_densidades)){
for (species_j in 2:ncol(df_densidades)){
df_densidades[species_i,species_j] <- (df_densidades[species_i,species_j]*100)/sum(df_densidades[,species_j])
}
}
}
list_sites <- t(colnames(df_densidades[2:ncol(df_densidades)]))
list_especies <- as.vector(df_densidades[,1])
list_ambientales <- as.vector(df_ambientales[,1])
#builds a matrix of SPECIES vs ENVIRONMENTAL VARIABLES called finalDF (will be used to load the results)
finalDF <- data.frame(matrix(nrow=nrow(df_densidades), ncol=nrow(df_ambientales)*3 + 1),stringsAsFactors=FALSE)
#######---------  IF islog10 parameter is false, converts the environmental data to LOG10
if (islog10 == FALSE){
df_ambientales <- log(df_ambientales[2:ncol(df_ambientales)], 10)
}
#########-------- STARTS OPTIMA CALCULATION
for (species_i in 1:nrow(df_densidades)){
testsp1 <- df_densidades[species_i, 2:ncol(df_densidades)]
# converts the data frames to matrices for calculation
testsp1 <- data.matrix(testsp1)
testamb <- data.matrix(df_ambientales)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# converts matrices back to data frames for row sums
testsp1_amb <- as.data.frame(testsp1_amb)
testsp1_amb$sumaAB <- rowSums(testsp1_amb, na.rm=TRUE)
# Adds species densities in all samples only if there is a valid environmental parameter for each sample into a new column (sumaDens_SiFQ)
for (valrow in 1:nrow(testamb)) {
sumrowI <- 0
for (valcol in 1:ncol(testamb)){
if(!is.na(testamb[valrow,valcol])) {
sumrowI <- sumrowI + testsp1[1,valcol]}
}
testsp1_amb[valrow,'sumaDens_SiFQ'] <- sumrowI
}
# Divides total density sums by the column sumaDens_SiFQ
testsp1_amb$div <- testsp1_amb$sumaAB/testsp1_amb$sumaDens_SiFQ
# OPTIMA CALCULATION: antiLog of the previous calculation for each sample, to revert from log10
testsp1_amb$Optimo <- 10^testsp1_amb$div
#########-------- STARTS TOLERANCE RANGE CALCULATION
# First calculates the difference between the log of the original environmental variable and the log of the optimum
testsp1_tol <- testamb - testsp1_amb$div
# Then elevates the entire matrix to the square
testsp1_tol <- testsp1_tol^2
# And the elevated matrix is multiplied by the species' density for each site
for (valrow in 1:nrow(testsp1_tol)) {
for (valcol in 1:ncol(testsp1_tol)){
testsp1_tol[valrow,valcol] <- testsp1_tol[valrow,valcol] * testsp1[1,valcol]
}
}
# Adds rows into a new column (sumaTol)
testsp1_tol <- as.data.frame(testsp1_tol)
testsp1_tol$sumaTol <- rowSums(testsp1_tol, na.rm=TRUE)
# Divides the sumaTol column by the "sumaDens_SiFQ" column used in optima calculation
testsp1_tol$divTol <- testsp1_tol$sumaTol / testsp1_amb$sumaDens_SiFQ
# Square root of that division
testsp1_tol$SqdivTol <- sqrt(testsp1_tol$divTol)
# Adds new columns: With tolerance high and tolerance low
testsp1_tol$Tol_high <-  10^(testsp1_amb$div + testsp1_tol$SqdivTol)
testsp1_tol$Tol_low <-  10^(testsp1_amb$div - testsp1_tol$SqdivTol)
########-------- COPIES EVERYTHING TO THE FINAL data frame FOR DISPLAY
# COPIES THE OPTIMUM AND TOLERANCE COLUMNS TO A SEPARATE DATA FRAME, TRANSPOSES IT AND COPIES
# IT TO finalDF FOR EXPORT
testsp1_final <- data.frame(testsp1_amb$Optimo, testsp1_tol$Tol_high, testsp1_tol$Tol_low, stringsAsFactors=FALSE)
# Rearranges rows
for (valrow in 2:nrow(testsp1_final)) {
for (valcol in 1:3){
testsp1_final[1,ncol(testsp1_final)+1] <- testsp1_final[valrow,valcol]
}
}
# Adds a column in the final data frame with the species' names (from the original CSV file)
testsp1_final <- head(testsp1_final,1)
testsp1_final <- cbind(a = 'spName', testsp1_final)
finalDF[species_i,] <- testsp1_final[1,]
}
# COPIES THE LIST OF SPECIES NAME TO THE 1ST COLUMN OF THE FINAL DATAFRAME
finalDF[,1] <- df_densidades[,1]
# COPIES THE LIST OF ENVIRONMENTAL VARIABLES AS COLUMN NAMES. THREE COLUMNS PER VARIABLE (OPTIMUM, TOLERANCE HIGH, TOLERANCE LOW)
colnames(finalDF)[1] <- "Species"
numamb <- length(list_ambientales)
for (val in 1:numamb){
valcol2 <- val * 3 - 1
colnames(finalDF)[valcol2] <- list_ambientales[val]
colnames(finalDF)[valcol2+1] <- paste(list_ambientales[val], "-HIGH")
colnames(finalDF)[valcol2+2] <- paste(list_ambientales[val], "-LOW")
}
#increases print option
options(max.print=900000)
print("Optimum values and tolerance range calculated and placed in the final data frame")
print("Use View() to view data frame with results")
return(finalDF)
}
########-------- FUNCTION OP_CALCULATE CALCULATES OPTIMA AND TOLERANCE RANGES  --------------#########
op_calculate <- function(enviromental_df, species_df, isRelAb=TRUE, islog10=FALSE){
# First checks in environmental and species data frames exist. If not, loads them from CSV files
if(missing(enviromental_df) | missing(species_df) ) {
print("Select CSV matrices")
########-------- LOADS THE SPECIES AND ENVIRONMENTAL DATA FROM CSV FILES IF NOT IN DATAMATRIX
Filters <- matrix(c("Comma Separated Values (CSV)", "*.csv"),
1, 2, byrow = TRUE)
print("Select ENVIRONMENTAL matrix")
enviromental_df <- read.csv(choose.files(caption="Select environmental matrix", filters = Filters),sep=",")
print("Select SPECIES matrix")
species_df <- read.csv(choose.files(caption="Select species density matrix", filters = Filters),sep=",")
}
df_densidades <- species_df
df_ambientales <- enviromental_df
#Checks that both matrices exist, or exits
if(missing(enviromental_df) | missing(species_df) ) {
stop("The correct matrices were not selected, the script will cancel.")
}
print("Calculating... please wait!")
# IF THE SPECIES DATA IS NOT RELATIVE ABUNDANCE, IT CONVERTS IT TO RELATIVE ABUNDANCE
if(isRelAb==FALSE){
print("Converting species' densities to relative abundance")
for (species_i in 1:nrow(df_densidades)){
for (species_j in 2:ncol(df_densidades)){
df_densidades[species_i,species_j] <- (df_densidades[species_i,species_j]*100)/sum(df_densidades[,species_j])
}
}
}
list_sites <- t(colnames(df_densidades[2:ncol(df_densidades)]))
list_especies <- as.vector(df_densidades[,1])
list_ambientales <- as.vector(df_ambientales[,1])
#builds a matrix of SPECIES vs ENVIRONMENTAL VARIABLES called finalDF (will be used to load the results)
finalDF <- data.frame(matrix(nrow=nrow(df_densidades), ncol=nrow(df_ambientales)*3 + 1),stringsAsFactors=FALSE)
#######---------  IF islog10 parameter is false, converts the environmental data to LOG10
if (islog10 == FALSE){
df_ambientales <- log(df_ambientales[2:ncol(df_ambientales)], 10)
}
#########-------- STARTS OPTIMA CALCULATION
for (species_i in 1:nrow(df_densidades)){
testsp1 <- df_densidades[species_i, 2:ncol(df_densidades)]
# converts the data frames to matrices for calculation
testsp1 <- data.matrix(testsp1)
testamb <- data.matrix(df_ambientales)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# converts matrices back to data frames for row sums
testsp1_amb <- as.data.frame(testsp1_amb)
testsp1_amb$sumaAB <- rowSums(testsp1_amb, na.rm=TRUE)
# Adds species densities in all samples only if there is a valid environmental parameter for each sample into a new column (sumaDens_SiFQ)
for (valrow in 1:nrow(testamb)) {
sumrowI <- 0
for (valcol in 1:ncol(testamb)){
if(!is.na(testamb[valrow,valcol])) {
sumrowI <- sumrowI + testsp1[1,valcol]}
}
testsp1_amb[valrow,'sumaDens_SiFQ'] <- sumrowI
}
# Divides total density sums by the column sumaDens_SiFQ
testsp1_amb$div <- testsp1_amb$sumaAB/testsp1_amb$sumaDens_SiFQ
# OPTIMA CALCULATION: antiLog of the previous calculation for each sample, to revert from log10
testsp1_amb$Optimo <- 10^testsp1_amb$div
#########-------- STARTS TOLERANCE RANGE CALCULATION
# First calculates the difference between the log of the original environmental variable and the log of the optimum
testsp1_tol <- testamb - testsp1_amb$div
# Then elevates the entire matrix to the square
testsp1_tol <- testsp1_tol^2
# And the elevated matrix is multiplied by the species' density for each site
for (valrow in 1:nrow(testsp1_tol)) {
for (valcol in 1:ncol(testsp1_tol)){
testsp1_tol[valrow,valcol] <- testsp1_tol[valrow,valcol] * testsp1[1,valcol]
}
}
# Adds rows into a new column (sumaTol)
testsp1_tol <- as.data.frame(testsp1_tol)
testsp1_tol$sumaTol <- rowSums(testsp1_tol, na.rm=TRUE)
# Divides the sumaTol column by the "sumaDens_SiFQ" column used in optima calculation
testsp1_tol$divTol <- testsp1_tol$sumaTol / testsp1_amb$sumaDens_SiFQ
# Square root of that division
testsp1_tol$SqdivTol <- sqrt(testsp1_tol$divTol)
# Adds new columns: With tolerance high and tolerance low
testsp1_tol$Tol_high <-  10^(testsp1_amb$div + testsp1_tol$SqdivTol)
testsp1_tol$Tol_low <-  10^(testsp1_amb$div - testsp1_tol$SqdivTol)
########-------- COPIES EVERYTHING TO THE FINAL data frame FOR DISPLAY
# COPIES THE OPTIMUM AND TOLERANCE COLUMNS TO A SEPARATE DATA FRAME, TRANSPOSES IT AND COPIES
# IT TO finalDF FOR EXPORT
testsp1_final <- data.frame(testsp1_amb$Optimo, testsp1_tol$Tol_high, testsp1_tol$Tol_low, stringsAsFactors=FALSE)
# Rearranges rows
for (valrow in 2:nrow(testsp1_final)) {
for (valcol in 1:3){
testsp1_final[1,ncol(testsp1_final)+1] <- testsp1_final[valrow,valcol]
}
}
# Adds a column in the final data frame with the species' names (from the original CSV file)
testsp1_final <- head(testsp1_final,1)
testsp1_final <- cbind(a = 'spName', testsp1_final)
finalDF[species_i,] <- testsp1_final[1,]
}
# COPIES THE LIST OF SPECIES NAME TO THE 1ST COLUMN OF THE FINAL DATAFRAME
finalDF[,1] <- df_densidades[,1]
# COPIES THE LIST OF ENVIRONMENTAL VARIABLES AS COLUMN NAMES. THREE COLUMNS PER VARIABLE (OPTIMUM, TOLERANCE HIGH, TOLERANCE LOW)
colnames(finalDF)[1] <- "Species"
numamb <- length(list_ambientales)
for (val in 1:numamb){
valcol2 <- val * 3 - 1
colnames(finalDF)[valcol2] <- list_ambientales[val]
colnames(finalDF)[valcol2+1] <- paste(list_ambientales[val], "-HIGH")
colnames(finalDF)[valcol2+2] <- paste(list_ambientales[val], "-LOW")
}
#increases print option
options(max.print=900000)
print("Optimum values and tolerance range calculated and placed in the final data frame")
print("Use View() to view data frame with results")
return(finalDF)
}
op_calculate(,,,TRUE)
enviromental_df <- read.csv(choose.files(caption="Select environmental matrix", filters = Filters),sep=",")
species_df <- read.csv(choose.files(caption="Select species density matrix", filters = Filters),sep=",")
df_densidades <- species_df
df_ambientales <- enviromental_df
list_sites <- t(colnames(df_densidades[2:ncol(df_densidades)]))
list_especies <- as.vector(df_densidades[,1])
list_ambientales <- as.vector(df_ambientales[,1])
#builds a matrix of SPECIES vs ENVIRONMENTAL VARIABLES called finalDF (will be used to load the results)
finalDF <- data.frame(matrix(nrow=nrow(df_densidades), ncol=nrow(df_ambientales)*3 + 1),stringsAsFactors=FALSE)
#########-------- STARTS OPTIMA CALCULATION
for (species_i in 1:nrow(df_densidades)){
testsp1 <- df_densidades[species_i, 2:ncol(df_densidades)]
# converts the data frames to matrices for calculation
testsp1 <- data.matrix(testsp1)
testamb <- data.matrix(df_ambientales)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# converts matrices back to data frames for row sums
testsp1_amb <- as.data.frame(testsp1_amb)
testsp1_amb$sumaAB <- rowSums(testsp1_amb, na.rm=TRUE)
# Adds species densities in all samples only if there is a valid environmental parameter for each sample into a new column (sumaDens_SiFQ)
for (valrow in 1:nrow(testamb)) {
sumrowI <- 0
for (valcol in 1:ncol(testamb)){
if(!is.na(testamb[valrow,valcol])) {
sumrowI <- sumrowI + testsp1[1,valcol]}
}
testsp1_amb[valrow,'sumaDens_SiFQ'] <- sumrowI
}
# Divides total density sums by the column sumaDens_SiFQ
testsp1_amb$div <- testsp1_amb$sumaAB/testsp1_amb$sumaDens_SiFQ
# OPTIMA CALCULATION: antiLog of the previous calculation for each sample, to revert from log10
testsp1_amb$Optimo <- 10^testsp1_amb$div
#########-------- STARTS TOLERANCE RANGE CALCULATION
# First calculates the difference between the log of the original environmental variable and the log of the optimum
testsp1_tol <- testamb - testsp1_amb$div
# Then elevates the entire matrix to the square
testsp1_tol <- testsp1_tol^2
# And the elevated matrix is multiplied by the species' density for each site
for (valrow in 1:nrow(testsp1_tol)) {
for (valcol in 1:ncol(testsp1_tol)){
testsp1_tol[valrow,valcol] <- testsp1_tol[valrow,valcol] * testsp1[1,valcol]
}
}
# Adds rows into a new column (sumaTol)
testsp1_tol <- as.data.frame(testsp1_tol)
testsp1_tol$sumaTol <- rowSums(testsp1_tol, na.rm=TRUE)
# Divides the sumaTol column by the "sumaDens_SiFQ" column used in optima calculation
testsp1_tol$divTol <- testsp1_tol$sumaTol / testsp1_amb$sumaDens_SiFQ
# Square root of that division
testsp1_tol$SqdivTol <- sqrt(testsp1_tol$divTol)
# Adds new columns: With tolerance high and tolerance low
testsp1_tol$Tol_high <-  10^(testsp1_amb$div + testsp1_tol$SqdivTol)
testsp1_tol$Tol_low <-  10^(testsp1_amb$div - testsp1_tol$SqdivTol)
########-------- COPIES EVERYTHING TO THE FINAL data frame FOR DISPLAY
# COPIES THE OPTIMUM AND TOLERANCE COLUMNS TO A SEPARATE DATA FRAME, TRANSPOSES IT AND COPIES
# IT TO finalDF FOR EXPORT
testsp1_final <- data.frame(testsp1_amb$Optimo, testsp1_tol$Tol_high, testsp1_tol$Tol_low, stringsAsFactors=FALSE)
# Rearranges rows
for (valrow in 2:nrow(testsp1_final)) {
for (valcol in 1:3){
testsp1_final[1,ncol(testsp1_final)+1] <- testsp1_final[valrow,valcol]
}
}
# Adds a column in the final data frame with the species' names (from the original CSV file)
testsp1_final <- head(testsp1_final,1)
testsp1_final <- cbind(a = 'spName', testsp1_final)
finalDF[species_i,] <- testsp1_final[1,]
}
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# converts matrices back to data frames for row sums
testsp1_amb <- as.data.frame(testsp1_amb)
testsp1_amb$sumaAB <- rowSums(testsp1_amb, na.rm=TRUE)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# converts the data frames to matrices for calculation
testsp1 <- data.matrix(testsp1)
testamb <- data.matrix(df_ambientales)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
View(testsp1_amb)
View(testsp1)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,2:ncol(testamb)], MARGIN=2, testsp1, '*')
View(df_ambientales)
df_ambientales1 <- log(df_ambientales[2:ncol(df_ambientales)], 10)
View(df_ambientales1)
#if data is already log, it eliminates the first column (labels)
df_ambientales1 <- df_ambientales[,-1]
View(df_ambientales1)
#if data is already log, it eliminates the first column (labels)
df_ambientales <- df_ambientales[,-1]
#########-------- STARTS OPTIMA CALCULATION
for (species_i in 1:nrow(df_densidades)){
testsp1 <- df_densidades[species_i, 2:ncol(df_densidades)]
# converts the data frames to matrices for calculation
testsp1 <- data.matrix(testsp1)
testamb <- data.matrix(df_ambientales)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# converts matrices back to data frames for row sums
testsp1_amb <- as.data.frame(testsp1_amb)
testsp1_amb$sumaAB <- rowSums(testsp1_amb, na.rm=TRUE)
# Adds species densities in all samples only if there is a valid environmental parameter for each sample into a new column (sumaDens_SiFQ)
for (valrow in 1:nrow(testamb)) {
sumrowI <- 0
for (valcol in 1:ncol(testamb)){
if(!is.na(testamb[valrow,valcol])) {
sumrowI <- sumrowI + testsp1[1,valcol]}
}
testsp1_amb[valrow,'sumaDens_SiFQ'] <- sumrowI
}
# Divides total density sums by the column sumaDens_SiFQ
testsp1_amb$div <- testsp1_amb$sumaAB/testsp1_amb$sumaDens_SiFQ
# OPTIMA CALCULATION: antiLog of the previous calculation for each sample, to revert from log10
testsp1_amb$Optimo <- 10^testsp1_amb$div
#########-------- STARTS TOLERANCE RANGE CALCULATION
# First calculates the difference between the log of the original environmental variable and the log of the optimum
testsp1_tol <- testamb - testsp1_amb$div
# Then elevates the entire matrix to the square
testsp1_tol <- testsp1_tol^2
# And the elevated matrix is multiplied by the species' density for each site
for (valrow in 1:nrow(testsp1_tol)) {
for (valcol in 1:ncol(testsp1_tol)){
testsp1_tol[valrow,valcol] <- testsp1_tol[valrow,valcol] * testsp1[1,valcol]
}
}
# Adds rows into a new column (sumaTol)
testsp1_tol <- as.data.frame(testsp1_tol)
testsp1_tol$sumaTol <- rowSums(testsp1_tol, na.rm=TRUE)
# Divides the sumaTol column by the "sumaDens_SiFQ" column used in optima calculation
testsp1_tol$divTol <- testsp1_tol$sumaTol / testsp1_amb$sumaDens_SiFQ
# Square root of that division
testsp1_tol$SqdivTol <- sqrt(testsp1_tol$divTol)
# Adds new columns: With tolerance high and tolerance low
testsp1_tol$Tol_high <-  10^(testsp1_amb$div + testsp1_tol$SqdivTol)
testsp1_tol$Tol_low <-  10^(testsp1_amb$div - testsp1_tol$SqdivTol)
########-------- COPIES EVERYTHING TO THE FINAL data frame FOR DISPLAY
# COPIES THE OPTIMUM AND TOLERANCE COLUMNS TO A SEPARATE DATA FRAME, TRANSPOSES IT AND COPIES
# IT TO finalDF FOR EXPORT
testsp1_final <- data.frame(testsp1_amb$Optimo, testsp1_tol$Tol_high, testsp1_tol$Tol_low, stringsAsFactors=FALSE)
# Rearranges rows
for (valrow in 2:nrow(testsp1_final)) {
for (valcol in 1:3){
testsp1_final[1,ncol(testsp1_final)+1] <- testsp1_final[valrow,valcol]
}
}
# Adds a column in the final data frame with the species' names (from the original CSV file)
testsp1_final <- head(testsp1_final,1)
testsp1_final <- cbind(a = 'spName', testsp1_final)
finalDF[species_i,] <- testsp1_final[1,]
}
########-------- FUNCTION OP_CALCULATE CALCULATES OPTIMA AND TOLERANCE RANGES  --------------#########
op_calculate <- function(enviromental_df, species_df, isRelAb=TRUE, islog10=FALSE){
# First checks in environmental and species data frames exist. If not, loads them from CSV files
if(missing(enviromental_df) | missing(species_df) ) {
print("Select CSV matrices")
########-------- LOADS THE SPECIES AND ENVIRONMENTAL DATA FROM CSV FILES IF NOT IN DATAMATRIX
Filters <- matrix(c("Comma Separated Values (CSV)", "*.csv"),
1, 2, byrow = TRUE)
print("Select ENVIRONMENTAL matrix")
enviromental_df <- read.csv(choose.files(caption="Select environmental matrix", filters = Filters),sep=",")
print("Select SPECIES matrix")
species_df <- read.csv(choose.files(caption="Select species density matrix", filters = Filters),sep=",")
}
df_densidades <- species_df
df_ambientales <- enviromental_df
#Checks that both matrices exist, or exits
if(missing(enviromental_df) | missing(species_df) ) {
stop("The correct matrices were not selected, the script will cancel.")
}
print("Calculating... please wait!")
# IF THE SPECIES DATA IS NOT RELATIVE ABUNDANCE, IT CONVERTS IT TO RELATIVE ABUNDANCE
if(isRelAb==FALSE){
print("Converting species' densities to relative abundance")
for (species_i in 1:nrow(df_densidades)){
for (species_j in 2:ncol(df_densidades)){
df_densidades[species_i,species_j] <- (df_densidades[species_i,species_j]*100)/sum(df_densidades[,species_j])
}
}
}
list_sites <- t(colnames(df_densidades[2:ncol(df_densidades)]))
list_especies <- as.vector(df_densidades[,1])
list_ambientales <- as.vector(df_ambientales[,1])
#builds a matrix of SPECIES vs ENVIRONMENTAL VARIABLES called finalDF (will be used to load the results)
finalDF <- data.frame(matrix(nrow=nrow(df_densidades), ncol=nrow(df_ambientales)*3 + 1),stringsAsFactors=FALSE)
#######---------  IF islog10 parameter is false, converts the environmental data to LOG10
if (islog10 == FALSE){
df_ambientales <- log(df_ambientales[2:ncol(df_ambientales)], 10)
} else {
#if data is already log, it eliminates the first column (labels)
df_ambientales <- df_ambientales[,-1]
}
#########-------- STARTS OPTIMA CALCULATION
for (species_i in 1:nrow(df_densidades)){
testsp1 <- df_densidades[species_i, 2:ncol(df_densidades)]
# converts the data frames to matrices for calculation
testsp1 <- data.matrix(testsp1)
testamb <- data.matrix(df_ambientales)
# multiplies both matrices
testsp1_amb <- sweep(testamb[,1:ncol(testamb)], MARGIN=2, testsp1, '*')
# converts matrices back to data frames for row sums
testsp1_amb <- as.data.frame(testsp1_amb)
testsp1_amb$sumaAB <- rowSums(testsp1_amb, na.rm=TRUE)
# Adds species densities in all samples only if there is a valid environmental parameter for each sample into a new column (sumaDens_SiFQ)
for (valrow in 1:nrow(testamb)) {
sumrowI <- 0
for (valcol in 1:ncol(testamb)){
if(!is.na(testamb[valrow,valcol])) {
sumrowI <- sumrowI + testsp1[1,valcol]}
}
testsp1_amb[valrow,'sumaDens_SiFQ'] <- sumrowI
}
# Divides total density sums by the column sumaDens_SiFQ
testsp1_amb$div <- testsp1_amb$sumaAB/testsp1_amb$sumaDens_SiFQ
# OPTIMA CALCULATION: antiLog of the previous calculation for each sample, to revert from log10
testsp1_amb$Optimo <- 10^testsp1_amb$div
#########-------- STARTS TOLERANCE RANGE CALCULATION
# First calculates the difference between the log of the original environmental variable and the log of the optimum
testsp1_tol <- testamb - testsp1_amb$div
# Then elevates the entire matrix to the square
testsp1_tol <- testsp1_tol^2
# And the elevated matrix is multiplied by the species' density for each site
for (valrow in 1:nrow(testsp1_tol)) {
for (valcol in 1:ncol(testsp1_tol)){
testsp1_tol[valrow,valcol] <- testsp1_tol[valrow,valcol] * testsp1[1,valcol]
}
}
# Adds rows into a new column (sumaTol)
testsp1_tol <- as.data.frame(testsp1_tol)
testsp1_tol$sumaTol <- rowSums(testsp1_tol, na.rm=TRUE)
# Divides the sumaTol column by the "sumaDens_SiFQ" column used in optima calculation
testsp1_tol$divTol <- testsp1_tol$sumaTol / testsp1_amb$sumaDens_SiFQ
# Square root of that division
testsp1_tol$SqdivTol <- sqrt(testsp1_tol$divTol)
# Adds new columns: With tolerance high and tolerance low
testsp1_tol$Tol_high <-  10^(testsp1_amb$div + testsp1_tol$SqdivTol)
testsp1_tol$Tol_low <-  10^(testsp1_amb$div - testsp1_tol$SqdivTol)
########-------- COPIES EVERYTHING TO THE FINAL data frame FOR DISPLAY
# COPIES THE OPTIMUM AND TOLERANCE COLUMNS TO A SEPARATE DATA FRAME, TRANSPOSES IT AND COPIES
# IT TO finalDF FOR EXPORT
testsp1_final <- data.frame(testsp1_amb$Optimo, testsp1_tol$Tol_high, testsp1_tol$Tol_low, stringsAsFactors=FALSE)
# Rearranges rows
for (valrow in 2:nrow(testsp1_final)) {
for (valcol in 1:3){
testsp1_final[1,ncol(testsp1_final)+1] <- testsp1_final[valrow,valcol]
}
}
# Adds a column in the final data frame with the species' names (from the original CSV file)
testsp1_final <- head(testsp1_final,1)
testsp1_final <- cbind(a = 'spName', testsp1_final)
finalDF[species_i,] <- testsp1_final[1,]
}
# COPIES THE LIST OF SPECIES NAME TO THE 1ST COLUMN OF THE FINAL DATAFRAME
finalDF[,1] <- df_densidades[,1]
# COPIES THE LIST OF ENVIRONMENTAL VARIABLES AS COLUMN NAMES. THREE COLUMNS PER VARIABLE (OPTIMUM, TOLERANCE HIGH, TOLERANCE LOW)
colnames(finalDF)[1] <- "Species"
numamb <- length(list_ambientales)
for (val in 1:numamb){
valcol2 <- val * 3 - 1
colnames(finalDF)[valcol2] <- list_ambientales[val]
colnames(finalDF)[valcol2+1] <- paste(list_ambientales[val], "-HIGH")
colnames(finalDF)[valcol2+2] <- paste(list_ambientales[val], "-LOW")
}
#increases print option
options(max.print=900000)
print("Optimum values and tolerance range calculated and placed in the final data frame")
print("Use View() to view data frame with results")
return(finalDF)
}
op_calculate(,,,TRUE)
results <- op_calculate(,,,TRUE)
View(results)
